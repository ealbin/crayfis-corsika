#!/usr/bin/env python3

# (c) Copyright 2018-2019 CORSIKA Project, corsika-project@lists.kit.edu
#
# See file AUTHORS for a list of contributors.
#
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3). See file LICENSE for a full version of
# the license.


import pickle, sys, itertools



# loads the pickled particle_db (which is an OrderedDict)
def load_particledb(filename):
    with open(filename, "rb") as f:
        particle_db = pickle.load(f)
    return particle_db



# 
def read_sibyll_codes(filename, particle_db):
    with open(filename) as f:
        for line in f:
            line = line.strip()
            if line[0] == '#':
                continue            
            identifier, sib_code, canInteractFlag, xsType = line.split()
            try:
                particle_db[identifier]["sibyll_code"] = int(sib_code)
                particle_db[identifier]["sibyll_xsType"] = int(xsType)
            except KeyError as e:
                raise Exception("Identifier '{:s}' not found in particle_db".format(identifier))


            

# generates the enum to access sibyll particles by readable names
def generate_sibyll_enum(particle_db):
    output = "enum class SibyllCode : int8_t {\n"
    for identifier, pData in particle_db.items():
        if pData.get('sibyll_code') != None:
            output += "  {:s} = {:d},\n".format(identifier, pData['sibyll_code'])
    output += "};\n"
    return output



# generates the look-up table to convert corsika codes to sibyll codes
def generate_corsika2sibyll(particle_db):    
    string = "std::array<SibyllCodeIntType, {:d}> constexpr corsika2sibyll = {{\n".format(len(particle_db))
    for identifier, pData in particle_db.items():
        sibCode = pData.get("sibyll_code", 0)
        string += "  {:d}, // {:s}\n".format(sibCode, identifier if sibCode else identifier + " (not implemented in SIBYLL)")
    string += "};\n"
    return string
    


# generates the look-up table to convert corsika codes to sibyll codes
def generate_corsika2sibyll_xsType(particle_db):    
    string = "std::array<int, {:d}> constexpr corsika2sibyllXStype = {{\n".format(len(particle_db))
    for identifier, pData in particle_db.items():
        sibCodeXS = pData.get("sibyll_xsType", 0)
        string += "  {:d}, // {:s}\n".format(sibCodeXS, identifier if sibCodeXS else identifier + " (not implemented in SIBYLL)")
    string += "};\n"
    return string


# generates the look-up table to convert sibyll codes to corsika codes    
def generate_sibyll2corsika(particle_db) :
    string = ""
    
    minID = 0
    for identifier, pData in particle_db.items() :
        if 'sibyll_code' in pData:
            minID = min(minID, pData['sibyll_code'])

    string += "SibyllCodeIntType constexpr minSibyll = {:d};\n\n".format(minID)

    pDict = {}
    for identifier, pData in particle_db.items() :
        if 'sibyll_code' in pData:
            sib_code = pData['sibyll_code'] - minID
            pDict[sib_code] = identifier
    
    nPart = max(pDict.keys()) - min(pDict.keys()) + 1
    string += "std::array<corsika::particles::Code, {:d}> constexpr sibyll2corsika = {{\n".format(nPart)
    
    for iPart in range(nPart) :
        if iPart in pDict:
            identifier = pDict[iPart]
        else:
            identifier = "Unknown"
        string += "  corsika::particles::Code::{:s}, \n".format(identifier)
    
    string += "};\n"
    return string

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("usage: {:s} <particle_db.pkl> <sibyll_codes.dat>".format(sys.argv[0]), file=sys.stderr)
        sys.exit(1)
        
    print("code_generator.py for SIBYLL")
    
    particle_db = load_particledb(sys.argv[1])
    read_sibyll_codes(sys.argv[2], particle_db)
    
    with open("Generated.inc", "w") as f:
        print("// this file is automatically generated\n// edit at your own risk!\n", file=f)
        print(generate_sibyll_enum(particle_db), file=f)
        print(generate_corsika2sibyll(particle_db), file=f)
        print(generate_sibyll2corsika(particle_db), file=f)
        print(generate_corsika2sibyll_xsType(particle_db), file=f)
